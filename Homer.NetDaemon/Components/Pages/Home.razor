@page "/"
@using System.Reactive.Concurrency
@using System.Reactive.Linq
@using global::NetDaemon.HassModel
@using global::NetDaemon.HassModel.Entities
@using Homer.NetDaemon.Channels
@using Homer.NetDaemon.Entities
@using Homer.NetDaemon.Options
@using Microsoft.Extensions.Options
@rendermode InteractiveServer

@code {
  [Inject] public IHaContext HaContext { get; set; } = null!;
  [Inject] public Entities Entities { get; set; } = null!;
  [Inject] public IScheduler Scheduler { get; set; } = null!;
  [Inject] public IOptions<GoogleHomeDashboardOptions> GoogleHomeDashboardOptions { get; set; } = null!;
  [SupplyParameterFromQuery] private string Secret { get; set; }

  private DateTime? HeaterOldOnDateTime { get; set; }
  private DateTime? HeaterOldOffDateTime { get; set; }
  private DateTime? HeaterScheduledOffDateTime { get; set; }
  private string? Off => (HeaterScheduledOffDateTime - DateTime.Now)?.TotalMinutes.ToString("F1");

  private double? PowerConsumption { get; set; }

  protected override void OnInitialized()
  {
    HaContext.StateAllChanges().SubscribeAsync(_ => InvokeAsync(StateHasChanged));
    Entities.Switch.WaterHeaterSwitch.StateChanges()
      .Where(e => e.New.IsOff())
      .Subscribe((e) =>
      {
        HeaterOldOnDateTime = e.Old?.LastChanged;
        HeaterOldOffDateTime = DateTime.Now;
        HeaterScheduledOffDateTime = null;
      });

    var powerSensors = new List<NumericSensorEntity>
    {
      Entities.Sensor.Bedroom3IkeaPlugPower,
      Entities.Sensor.Bedroom4IkeaPlugPower,
      Entities.Sensor.KitchenIkeaPlugPower,
      Entities.Sensor.WaterHeaterSwitchPower,
      Entities.Sensor.LivingRoomIkeaPlugPower,
      Entities.Sensor.MasterBedroomIkeaPlugPower
    };

    powerSensors.StateChanges().Subscribe(_ => { PowerConsumption = powerSensors.Sum(e => e.State); });
    PowerConsumption = powerSensors.Sum(e => e.State);
  }

  protected Action<bool> Click(SwitchEntity entity)
  {
    return value =>
    {
      if (value)
      {
        entity.TurnOn();
      }
      else
      {
        entity.TurnOff();
      }
    };
  }

  protected Action TurnOnHeater(TimeSpan timeSpan)
  {
    return () =>
    {
      HeaterScheduledOffDateTime = DateTime.Now + timeSpan;
      Entities.Switch.WaterHeaterSwitch.TurnOn();
      Channels.TurnOffWaterHeaterSwitch.Writer.TryWrite(timeSpan);
    };
  }

}

<PageTitle>Home</PageTitle>

@if (GoogleHomeDashboardOptions.Value.Secret != Secret)
{
  <span class="p-2">Nothing here!</span>
}
else
{
  @* Container *@
  <Stack IsRow="true" style="height: 100vh" class="p-2 gap-1">
    @* Left half *@
    <StackItem IsFill="true">
      <Stack class="gap-3">
        <StackItem>
          <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="StackAlignItems.Center">
            <StackItem>
              <span>阳台灯</span>
            </StackItem>
            <StackItem>
              <Toggle
                Value="Entities.Switch.BalconyLights.IsOn()"
                ValueChanged="Click(Entities.Switch.BalconyLights)"
                OnText="开"
                OffText="关"
                Color="Color.Warning"/>
            </StackItem>
          </Stack>
        </StackItem>
        <StackItem>
          <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="StackAlignItems.Center">
            <StackItem>
              <span>热水器</span>
            </StackItem>
            <StackItem>

              @if (HeaterScheduledOffDateTime is null)
              {
                <div class="btn-group" role="group">
                  <Button Color="Color.Warning" IsOutline="true" OnClick="TurnOnHeater(TimeSpan.FromMinutes(10))">10分
                  </Button>
                  <Button Color="Color.Warning" IsOutline="true" OnClick="TurnOnHeater(TimeSpan.FromMinutes(20))">20分
                  </Button>
                </div>
              }
              else
              {
                <span class="text-danger" style="font-weight: bold">@Off 分</span>
              }

            </StackItem>
          </Stack>
        </StackItem>
        <StackItem>
          @if (Entities.Switch.WaterHeaterSwitch.IsOff() && HeaterOldOffDateTime is not null && HeaterOldOnDateTime is not null)
          {
            <Card Color="Color.Danger">
              <BodyTemplate>
                上次使用 @HeaterOldOffDateTime.Value.ToShortTimeString()
                <br/>
                总 @((HeaterOldOffDateTime - HeaterOldOnDateTime).Value.TotalMinutes.ToString("F1")) 分
              </BodyTemplate>
            </Card>
          }
        </StackItem>
      </Stack>
    </StackItem>

    <StackItem>
      <Divider IsVertical="true"></Divider>
    </StackItem>

    @* Right half *@
    <StackItem IsFill="true">
      <Stack class="gap-3">
        <StackItem>
          <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="StackAlignItems.Center">
            <StackItem>
              <span>空调 1</span>
            </StackItem>
            <StackItem>
              <Toggle
                Value="Entities.Switch.Daikinap59921None.IsOn()"
                ValueChanged="Click(Entities.Switch.Daikinap59921None)"
                OnText="开"
                OffText="关"
                Color="Color.Warning"/>
            </StackItem>
          </Stack>
        </StackItem>
        <StackItem>
          <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="StackAlignItems.Center">
            <StackItem>
              <span>空调 2</span>
            </StackItem>
            <StackItem>
              <Toggle
                Value="Entities.Switch.Daikinap16703None.IsOn()"
                ValueChanged="Click(Entities.Switch.Daikinap16703None)"
                OnText="开"
                OffText="关"
                Color="Color.Warning"
              />
            </StackItem>
          </Stack>
        </StackItem>

        @if (PowerConsumption is not null)
        {
          <StackItem>
            <Divider/>
            <span>总电： @PowerConsumption.Value.ToString("F1") 瓦</span>
          </StackItem>
        }
      </Stack>
    </StackItem>
  </Stack>
}

