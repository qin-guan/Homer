@using System.Reactive.Linq
@using global::NetDaemon.HassModel.Entities
@using Homer.NetDaemon.Entities
@using Homer.NetDaemon.Services

@rendermode InteractiveServer
@implements IDisposable

@if (Switches.WaterHeaterSwitch.IsOn())
{
    <div class="d-flex flex-column justify-content-center align-items-center" style="flex: 1;">
        <span class="fs-1 text-danger fw-bold">
            @((WaterHeaterTimerService.ScheduledTurnOffDateTime - DateTime.Now).Value.Minutes)分
            @((WaterHeaterTimerService.ScheduledTurnOffDateTime - DateTime.Now).Value.Seconds)秒
        </span>
        <span class="fs-4">倒计时</span>
    </div>
}
else
{
    <div class="d-flex gap-2 justify-content-around align-items-center" style="flex: 1;">
        <button
            @onclick="TurnOnHeater(TimeSpan.FromMinutes(15))"
            class="rounded-3 d-flex flex-grow-1 justify-content-center align-items-center bg-danger-subtle border-0"
            style="min-height: 150px; min-width: 100px;">
            <span class="text-danger-emphasis fs-4">15分钟</span>
        </button>

        <button
            @onclick="TurnOnHeater(TimeSpan.FromMinutes(30))"
            class="rounded-3 d-flex flex-grow-1 justify-content-center align-items-center bg-danger-subtle border-0"
            style="min-height: 150px; min-width: 100px;">
            <span class="text-danger-emphasis fs-4">30分钟</span>
        </button>
    </div>
}

@code {

    [Inject] public SwitchEntities Switches { get; set; } = null!;
    [Inject] public WaterHeaterTimerService WaterHeaterTimerService { get; set; } = null!;

    private readonly List<IDisposable> _disposables = [];

    protected override void OnInitialized()
    {
        _disposables.Add(Switches.WaterHeaterSwitch.StateAllChanges().Subscribe(_ => InvokeAsync(StateHasChanged)));
        if (WaterHeaterTimerService.ScheduledTurnOffDateTime is not null)
        {
            _disposables.Add(
                Observable.Interval(TimeSpan.FromSeconds(1))
                    .TakeUntil(WaterHeaterTimerService.ScheduledTurnOffDateTime.Value)
                    .Subscribe(_ => InvokeAsync(StateHasChanged))
            );
        }
    }

    public void Dispose()
    {
        _disposables.ForEach(e => e.Dispose());
    }

    protected Action TurnOnHeater(TimeSpan timeSpan)
    {
        return () =>
        {
            WaterHeaterTimerService.ScheduledTurnOffDateTime = DateTime.Now + timeSpan;
            Switches.WaterHeaterSwitch.TurnOn();
            Channels.Channels.TurnOffWaterHeaterSwitch.Writer.TryWrite(timeSpan);
            _disposables.Add(
                Observable.Interval(TimeSpan.FromSeconds(1))
                    .TakeUntil(
                        DateTime.SpecifyKind(DateTime.Now + timeSpan, DateTimeKind.Utc)
                    )
                    .Subscribe(_ => InvokeAsync(StateHasChanged))
            );
        };
    }

}