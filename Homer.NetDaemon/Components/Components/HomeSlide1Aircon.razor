@using global::NetDaemon.HassModel.Entities
@using Homer.NetDaemon.Entities

@implements IDisposable

<Stack class="gap-2">
    @foreach (var (name, item) in _items)
    {
        <StackItem>
            <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="StackAlignItems.Center">
                <StackItem>
                    <span>@name</span>
                </StackItem>
                <StackItem>
                    <Toggle
                        Value="item.IsOn()"
                        ValueChanged="ToggleSwitch(item)"
                        OnText="开"
                        OffText="关"
                        Color="Color.Warning"/>
                </StackItem>
            </Stack>
        </StackItem>
    }
</Stack>

@code {
    [Inject] public SwitchEntities Switches { get; set; } = null!;

    private Dictionary<string, SwitchEntity> _items = new();
    private List<IDisposable> _disposables = [];

    protected override void OnInitialized()
    {
        _items["空调 1"] = Switches.Daikinap59921None;
        _items["空调 2"] = Switches.Daikinap16703None;

        _disposables.Add(_items.Values.StateAllChanges().Subscribe(_ => InvokeAsync(StateHasChanged)));
    }

    public void Dispose()
    {
        _disposables.ForEach(e => e.Dispose());
    }

    protected Action ToggleSwitch(SwitchEntity entity)
    {
        return () => entity.Toggle();
    }

}