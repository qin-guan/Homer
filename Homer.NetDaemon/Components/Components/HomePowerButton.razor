@using global::NetDaemon.HassModel
@using global::NetDaemon.HassModel.Entities
@using Homer.NetDaemon.Entities

@implements IDisposable
@rendermode InteractiveServer
@inject SwitchEntities Switches

<div class="d-flex flex-column gap-1 flex-grow-1">
    @if (_isLoading)
    {
        <button
            @onclick="Toggle"
            class="rounded-3 d-flex bg-secondary flex-grow-1 justify-content-center align-items-end border-0"
            style="min-height: @(Height)px;">
            <div class="rounded-circle bg-secondary-subtle"
                 style="width: 5px; height: 5px; margin-bottom: 20px;"></div>
        </button>
    }
    else if (Switch.IsOn())
    {
        <button
            @onclick="Toggle"
            class="rounded-3 d-flex flex-grow-1 justify-content-center align-items-end bg-warning border-0"
            style="min-height: @(Height)px;">
            <div class="rounded-circle bg-warning-subtle"
                 style="width: 8px; height: 8px; margin-bottom: 20px;"></div>
        </button>
    }
    else
    {
        <button
            @onclick="Toggle"
            class="rounded-3 d-flex bg-gray-100 flex-grow-1 justify-content-center align-items-end border-0"
            style="min-height: @(Height)px;">
            <div class="rounded-circle bg-primary"
                 style="width: 5px; height: 5px; margin-bottom: 20px;"></div>
        </button>
    }

    <span class="fs-5 text-center">@Name</span>
</div>

@code {
    [Parameter] public string SwitchId { get; set; } = null!;
    [Parameter] public string Name { get; set; } = null!;

    private SwitchEntity Switch => Switches.EnumerateAll().Single(s => s.EntityId == SwitchId);

    private const int Height = 150;
    private bool _isLoading;
    private readonly List<IDisposable> _disposables = [];

    protected override void OnInitialized()
    {
        _disposables.Add(Switch.StateChanges().SubscribeAsync(async _ =>
        {
            await InvokeAsync(() =>
            {
                _isLoading = false;
                StateHasChanged();
            });
        }));
    }

    private void Toggle(MouseEventArgs obj)
    {
        _isLoading = true;
        Switch.Toggle();
    }

    public void Dispose()
    {
        _disposables.ForEach(d => d.Dispose());
    }

}