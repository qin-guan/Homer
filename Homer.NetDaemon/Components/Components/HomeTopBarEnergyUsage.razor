@using global::NetDaemon.HassModel
@using global::NetDaemon.HassModel.Entities
@using Homer.NetDaemon.Entities
@implements IDisposable
@inject SensorEntities Sensors

<div class="d-flex justify-content-between align-items-center gap-2">
    <Badge Class="fs-6" Color="Color.Info" IsPill="true">实时</Badge>
    <span class="text-info fw-semibold fs-1">
        ⚡️ 家庭用电: @(_powerConsumption?.ToString("F1"))瓦
    </span>
</div>

@code {
    private double? _powerConsumption;
    private List<NumericSensorEntity>? _powerSensors;
    private readonly List<IDisposable> _disposables = [];

    protected override void OnInitialized()
    {
        _powerSensors =
        [
            Sensors.Bedroom2IkeaPlugPower,
            Sensors.Bedroom3IkeaPlugPower,
            Sensors.Bedroom4IkeaPlugPower,
            Sensors.MasterBedroomIkeaPlugPower,
            Sensors.LivingRoomIkeaPlugPower,
            Sensors.WashingMachineCurrentConsumption,
            Sensors.DishwasherPlugCurrentConsumption,
        ];

        _powerConsumption = _powerSensors.Sum(e => e.State);
        _disposables.Add(_powerSensors.StateAllChanges().SubscribeAsync(async _ =>
        {
            await InvokeAsync(() =>
            {
                _powerConsumption = _powerSensors.Sum(e => e.State);
                StateHasChanged();
            });
        }));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        using var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        _disposables.ForEach(e => e.Dispose());
    }

}