@using System.Reactive.Concurrency
@using System.Text.Json
@using global::NetDaemon.HassModel
@using Homer.NetDaemon.Entities
@inject RemoteEntities RemoteEntities
@inject InputTextEntities InputTextEntities
@inject IScheduler Scheduler
@rendermode InteractiveServer

<div class="d-flex justify-content-around gap-2" style="flex: 1;">
    @foreach (var blind in Blinds.Select((b, idx) => new { Value = b, Index = idx }))
    {
        <div class="d-flex flex-column gap-2" style="flex: 1;">
            <button style="flex: 1;" class="border-0 rounded-3" @onclick="Down(blind.Index, 0)">
                <BootstrapBlazorIcon Name="fa-solid fa-chevron-up fs-1"></BootstrapBlazorIcon>
            </button>

            @for (var i = 0; i < blind.Value; i++)
            {
                <button style="flex: 1;" class="border-0 rounded-3 bg-warning"
                        @onclick="Down(blind.Index, i+1)"></button>
            }

            @for (var i = 3; i > blind.Value; i--)
            {
                <button style="flex: 1;" class="border-0 rounded-3"
                        @onclick="Down(blind.Index, blind.Value + (4-i))"></button>
            }
        </div>
    }
</div>

<div class="d-flex justify-content-around gap-2" style="height: 50px;">
    <button style="flex: 1;" class="border-0 rounded-3" @onclick="Down(3, 0)">
        <BootstrapBlazorIcon Name="fa-solid fa-chevron-up fs-3"></BootstrapBlazorIcon>
    </button>

    <button style="flex: 1;" class="border-0 rounded-3" @onclick="Down(3, 4)">
        <BootstrapBlazorIcon Name="fa-solid fa-chevron-down fs-3"></BootstrapBlazorIcon>
    </button>
</div>

@code {

    private static readonly List<string> BlindNames = ["One", "Two", "Three", "All"];
    private static readonly List<int> DefaultBlindsState = [0, 0, 0];

    private List<int> Blinds => string.IsNullOrWhiteSpace(InputTextEntities.BalconyBlindsState.State)
        ? DefaultBlindsState
        : JsonSerializer.Deserialize<List<int>>(InputTextEntities.BalconyBlindsState.State)!;

    protected override async Task OnInitializedAsync()
    {
        InputTextEntities.BalconyBlindsState.StateChanges().SubscribeAsync(async _ => { await InvokeAsync(StateHasChanged); });
    }

    Action<MouseEventArgs> Down(int blind, int pos)
    {
        return (_) =>
        {
            var diff = Math.Abs(pos - Blinds[blind]);
            if (diff == 0) return;

            var op = pos > Blinds[blind] ? "Down" : "Up";
            RemoteEntities.LivingRoomRemote.SendCommand($"{BlindNames[blind]} {op}", "Balcony Blinds");
            Scheduler.Schedule(TimeSpan.FromSeconds(10 * diff), () => { RemoteEntities.LivingRoomRemote.SendCommand($"{BlindNames[blind]} Stop", "Balcony Blinds"); });
            var state = new List<int>(Blinds)
            {
                [blind] = pos
            };
            InputTextEntities.BalconyBlindsState.SetValue(JsonSerializer.Serialize(state));
        };
    }

}