@using System.Reactive.Linq
@using Homer.NetDaemon.Services
@using R3
@inject DataMallObservableFactoryService Factory
@implements IDisposable

<Stack style="height: calc(100vh / 2.5)" class="p-2 gap-1">
  <StackItem>
    <h5>
      <strong>
        巴士时间表
      </strong>
    </h5>
  </StackItem>

  <StackItem>
    <Stack>
      @foreach (var (c, timings) in _items)
      {
        <StackItem>
          <Stack IsRow="true" Justify="StackJustifyContent.Between" AlignItems="StackAlignItems.Center">
            <StackItem>
              <Tag Color="Color.Danger">
                <strong>
                  @c
                </strong>
              </Tag>
            </StackItem>
            <StackItem>
              @foreach (var timing in timings.Where(t => t.HasValue))
              {
                <span style="margin-left: 10px">
                  @((timing - DateTime.Now)!.Value.TotalMinutes.ToString("N0"))分钟
                </span>
              }
            </StackItem>
          </Stack>
          <Divider/>
        </StackItem>
      }
    </Stack>
  </StackItem>

  <StackItem>
    @_forecast
  </StackItem>
</Stack>

@code {
  private List<IDisposable> _disposables = [];
  private Dictionary<string, List<DateTime?>> _items = [];
  private string _forecast = "";


  protected override void OnInitialized()
  {
    if (RendererInfo.IsInteractive)
    {
      _disposables.Add(
        Factory.CreateWithBusStopCode("53139")
          .Select(v => v.Services.First(s => s.ServiceNo == "162"))
          .Subscribe(s =>
          {
            InvokeAsync(() =>
            {
              _items["74"] = [s.NextBus.EstimatedArrival, s.NextBus2.EstimatedArrival, s.NextBus3.EstimatedArrival];
              StateHasChanged();
            });
          })
      );

      _disposables.Add(
        Factory.CreateWithBusStopCode("53131")
          .Select(v => v.Services.First(s => s.ServiceNo == "54"))
          .Subscribe(s =>
          {
            InvokeAsync(() =>
            {
              _items["54"] = [s.NextBus.EstimatedArrival, s.NextBus2.EstimatedArrival, s.NextBus3.EstimatedArrival];
              StateHasChanged();
            });
          })
      );

      _disposables.Add(
        Factory.CreateForecast()
          .Select(f => f.Data.Items)
          .SelectMany(i => i.First().Forecasts)
          .Where(f => f.Area == "Bishan")
          .Select(f => f.Value)
          .Subscribe(forecast =>
          {
            InvokeAsync(() =>
            {
              _forecast = forecast;
              StateHasChanged();
            });
          })
      );
    }

    base.OnInitialized();
  }

  public void Dispose()
  {
    _disposables.ForEach(e => e.Dispose());
  }

}
